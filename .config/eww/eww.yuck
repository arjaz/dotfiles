;; TODO: get the router connection as well

(defpoll internet :interval "1.5s"
  "scripts/getinternet")

(defpoll volume :interval "0.1s"
  "scripts/getvol")

(defpoll date :interval "0.5s"
  "date '+%l:%M %P'")

;; That can be a listener instead
(defpoll active-workspace :interval "0.1s"
  "scripts/active-workspace")

;; That can be a listener instead
(defpoll used-workspaces :interval "0.1s"
  "scripts/used-workspaces")

(defpoll calendar_day :interval "1h" "date '+%d'")
(defpoll calendar_year :interval "1h" "date '+%Y'")

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (timestuff)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (internet)
    (music)
    (metric :label ""
            :value {volume != "" ? volume : "50"}
            :onchange "amixer -D pulse sset Master {}%")))

(defwidget timestuff []
  (eventbox :onclick "eww close calendar || eww open calendar"
    (box :class "timestuff" :orientation "h" :space-evenly false :halign "center"
     date)))

(defwidget internet []
  (box :class "internet"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {internet == "1 received" ? "" : "no internet |"}))

(defwidget music []
  (eventbox :onclick "playerctl play-pause"
    (box :class "music"
         :orientation "h"
         :space-evenly false
         :halign "center"
      {music != "" ? "${music} |" : ""})))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 0
    (button :class {active-workspace == 0 ? "active-workspace" : used-workspaces =~ "0" ? "" : "disabled-workspace"} :onclick "wmctrl -s 0"
      {used-workspaces =~ 0 ? "" : ""})
    (button :class {active-workspace == 1 ? "active-workspace" : used-workspaces =~ "1" ? "" : "disabled-workspace"} :onclick "wmctrl -s 1"
      {used-workspaces =~ 1 ? "" : ""})
    (button :class {active-workspace == 2 ? "active-workspace" : used-workspaces =~ "2" ? "" : "disabled-workspace"} :onclick "wmctrl -s 2"
      {used-workspaces =~ 2 ? "" : ""})
    (button :class {active-workspace == 3 ? "active-workspace" : used-workspaces =~ "3" ? "" : "disabled-workspace"} :onclick "wmctrl -s 3"
      {used-workspaces =~ 3 ? "" : ""})
    (button :class {active-workspace == 4 ? "active-workspace" : used-workspaces =~ "4" ? "" : "disabled-workspace"} :onclick "wmctrl -s 4"
      {used-workspaces =~ 4 ? "" : ""})
    (button :class {active-workspace == 5 ? "active-workspace" : used-workspaces =~ "5" ? "" : "disabled-workspace"} :onclick "wmctrl -s 5"
      {used-workspaces =~ 5 ? "" : ""})
    (button :class {active-workspace == 6 ? "active-workspace" : used-workspaces =~ "6" ? "" : "disabled-workspace"} :onclick "wmctrl -s 6"
      {used-workspaces =~ 6 ? "" : ""})
    (button :class {active-workspace == 7 ? "active-workspace" : used-workspaces =~ "7" ? "" : "disabled-workspace"} :onclick "wmctrl -s 7"
      {used-workspaces =~ 7 ? "" : ""})
    (button :class {active-workspace == 8 ? "active-workspace" : used-workspaces =~ "8" ? "" : "disabled-workspace"} :onclick "wmctrl -s 8"
      {used-workspaces =~ 8 ? "" : ""})
    (button :class {active-workspace == 9 ? "active-workspace" : used-workspaces =~ "9" ? "" : "disabled-workspace"} :onclick "wmctrl -s 9"
      {used-workspaces =~ 9 ? "" : ""})))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget cal []
  (box :class "cal" :orientation "v"
	(box :class "cal-in"
	  (calendar :class "cal"
			    :day calendar_day
			    :year calendar_year))))

(defwindow calendar
  :geometry (geometry :x "-10px"
					  :y "21px"
                      :anchor "top center"
					  :width "270px"
					  :height "60px")
  (cal))


(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "20px"
                      :anchor "top center")
  :reserve (struts :side "top"
                   :distance "20px")
  :wm-ignore false
  :stacking "bg"
  (bar))
