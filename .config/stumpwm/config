#|-*- mode:lisp -*-|#

(in-package :stumpwm)

(run-shell-command "~/.screenlayout/1.sh && eww open bar")
(run-shell-command "setxkbmap -option grp:sclk_toggle us,ua -option compose:ralt &")
(run-shell-command "redshift -l 50.4461248:30.5214979 -t 6500:3000 &")
(run-shell-command "wired &")
(run-shell-command "compfy --config ~/.config/compton.conf &")
(run-shell-command "~/dotfiles/scripts/to-light-theme.sh &")
(run-shell-command "XDG_CURRENT_DESKTOP=stumpwm /usr/lib/xdg-desktop-portal --replace &")

(init-load-path #p"~/code/lisp/")
(load-module "swm-gaps")
(load-module "ttf-fonts")
(load-module "globalwindows")

;; That is slow as hell, so I run it in a thread
(defun setup-font-and-cache ()
  (xft:cache-fonts)
  (set-font (make-instance 'xft:font
                           :family "Iosevka Comfy Motion Duo"
                           :subfamily "Regular"
                           :size 12)))
(sb-thread:make-thread #'setup-font-and-cache)

;; Head gaps run along the 4 borders of the monitor(s)
;; Inner gaps run along all the 4 borders of a window
;; Outer gaps add more padding to the outermost borders of a window
;; touching the screen border
;; Note that I'm using a version of swm-gaps with outer gaps per side hacked in
(setf swm-gaps:*head-gaps-size* 0
      swm-gaps:*inner-gaps-size* 5
      swm-gaps:*outer-gaps-top-size* 10
      swm-gaps:*outer-gaps-bottom-size* 30
      swm-gaps:*outer-gaps-left-size* 30
      swm-gaps:*outer-gaps-right-size* 30)
;; (swm-gaps:toggle-gaps)

;; TODO: reverse on theme change
(set-focus-color "Black")
(set-unfocus-color "White")

(set-focus-color "White")
(set-float-focus-color "White")
(setf *mouse-focus-policy* :click
      *window-border-style* :thin
      *maxsize-border-width* 1
      *normal-border-width* 1
      *transient-border-width* 1
      *float-window-title-height* 0
      *float-window-border* 1
      *message-window-gravity* :center
      *input-window-gravity* :center)

(defvar *arjaz/workspaces* '("1" "2" "3" "4" "5" "6" "7" "8" "9" "0"))
(defvar *arjaz/workspaces-switch-keys* '("!" "@" "#" "$" "%" "^" "&" "*" "(" ")"))

(grename "1")
(loop
  for group-name in (rest *arjaz/workspaces*)
  do
     (gnewbg group-name))
(loop
  for group-name in *arjaz/workspaces*
  for switch-key in *arjaz/workspaces-switch-keys*
  for select-cmd = (format nil "gselect ~a" group-name)
  for select-key = (kbd (format nil "s-~a" group-name))
  for move-cmd = (format nil "gmove ~a" group-name)
  for move-key = (kbd (format nil "s-~a" switch-key))
  do
     (define-key *top-map* select-key select-cmd)
     (define-key *top-map* move-key move-cmd))

;; (setf *window-placement-rules* nil)
(define-frame-preference "1"
  ;; Can I make it float
  (0 t t :class "firefox"))
(define-frame-preference "9"
  ;; Can I make it float
  (0 nil nil :class "TelegramDesktop"))

;; I want something to auto-balance the windows
;; and ergonomic resizes

(define-key *top-map* (kbd "s-Return") "exec kitty -e nu")
(define-key *top-map* (kbd "s-e") "exec emacsclient -c -a=''")
(define-key *top-map* (kbd "s-d") "exec rofi -show run")
(define-key *top-map* (kbd "s-b") "toggle-eww")
(define-key *top-map* (kbd "s-x") "delete")
(define-key *top-map* (kbd "s-i") "fnext")
(define-key *top-map* (kbd "s-h") "fother")
(define-key *top-map* (kbd "s-r") "remove")
(define-key *top-map* (kbd "s-s") "fullscreen")
(define-key *top-map* (kbd "s-l") "hsplit")
(define-key *top-map* (kbd "s-L") "vsplit")
;; (define-key *top-map* (kbd "s-m") "swap-with-master")
(define-key *top-map* (kbd "XF86AudioPause") "exec playerctl pause")
(define-key *top-map* (kbd "XF86AudioPlay") "exec playerctl play")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec pactl -- set-sink-volume 0 -5%")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec pactl -- set-sink-volume 0 +5%")
(define-key *top-map* (kbd "XF86AudioMute") "exec pactl set-sink-mute 0 toggle")

(set-prefix-key (kbd "s-o"))
(define-key *root-map* (kbd "w") "raise-firefox")
(define-key *root-map* (kbd "t") "raise-telegram")
(define-key *root-map* (kbd "e") "raise-emacs")
(define-key *root-map* (kbd "s") "maim-region")
(define-key *root-map* (kbd "s-s") "maim-app")
(define-key *root-map* (kbd "p") "exec pass clip -r")
(define-key *root-map* (kbd "j") "global-windowlist")

(defcommand toggle-float-this () ()
  (if (typep (current-window) 'float-window)
      (unfloat-this)
      (float-this)))
(define-key *top-map* (kbd "s-f") "toggle-float-this")

(defvar *d-map*)
(let ((map (make-sparse-keymap)))
  (define-key map (kbd "y") "exec sh ~/dotfiles/scripts/xclip-yt-dlp.sh")
  (setf *d-map* map))
(define-key *root-map* (kbd "d") '*d-map*)

(defvar *c-map*)
(let ((map (make-sparse-keymap)))
  (define-key map (kbd "l") "to-light-theme")
  (define-key map (kbd "d") "to-dark-theme")
  (define-key map (kbd "y") "exec sh ~/dotfiles/scripts/xclip-yt-dlp.sh")
  (define-key map (kbd "k") "exec setxkbmap -option grp:sclk_toggle us,ua -option compose:ralt")
  (define-key map (kbd "c") "exec eww close calendar || eww open calendar")
  (define-key map (kbd "t") "toggle-comfy-gaps")
  (define-key map (kbd "C-t") "toggle-gaps")
  (define-key map (kbd "w") "exec cd ~/code/core-contracts && make emacs")
  (setf *c-map* map))
(define-key *root-map* (kbd "c") '*c-map*)

(defcommand maim-region () ()
  (run-shell-command "maim -m 10 -s | xclip -selection clipboard -t image/png"))

(defcommand maim-app () ()
  (run-shell-command "maim -m 10 -i $(xdotool getactivewindow) | xclip -selection clipboard -t image/png"))

(defcommand toggle-comfy-gaps () ()
  (let ((swm-gaps:*outer-gaps-left-size* 200)
        (swm-gaps:*outer-gaps-right-size* 200))
    (mapcar
     #'stumpwm::maximize-window
     (stumpwm::only-tile-windows (stumpwm:group-windows (current-group))))))

(defcommand raise-telegram () ()
  (run-or-raise "telegram-desktop" '(:class "TelegramDesktop")))

(defcommand raise-emacs () ()
  (run-or-raise "emacsclient -c -a=''" '(:class "Emacs")))

(defcommand raise-firefox () ()
  (run-or-raise "firefox" '(:class "firefox")))

(defcommand toggle-eww () ()
  (if (head-mode-line (current-head))
      (destroy-mode-line (head-mode-line (current-head)))
      (run-shell-command "eww open bar &")))

(defcommand to-light-theme () ()
  (set-focus-color "Black")
  (set-unfocus-color "White")
  (run-shell-command "~/dotfiles/scripts/to-light-theme.sh")
  (when (head-mode-line (current-head))
    (destroy-mode-line (head-mode-line (current-head))))
  (run-shell-command "sleep 0.5 && eww open bar &"))

(defcommand to-dark-theme () ()
  (set-focus-color "White")
  (set-unfocus-color "Black")
  (run-shell-command "~/dotfiles/scripts/to-dark-theme.sh")
  (when (head-mode-line (current-head))
    (destroy-mode-line (head-mode-line (current-head))))
  (run-shell-command "sleep 0.5 && eww open bar &"))

(define-remapped-keys
    '(("(.*[Ff]irefox|TelegramDesktop)"
       ("M-w"   . "C-c")
       ("C-y"   . "C-v")
       ("C-s"   . "C-f")
       ("C-n"   . "Down")
       ("C-p"   . "Up")
       ;; ("C-f"   . "Right")
       ;; ("C-b"   . "Left")
       ;; ("C-M-b" . "M-Left")
       ;; ("C-M-f" . "M-Right")
       ;; ("M-f"   . "C-Right")
       ;; ("M-b"   . "C-Left")
       ;; ("C-v"   . "Next")
       ;; ("M-v"   . "Prior")
       ;; ("M-<"   . "Home")
       ;; ("M->"   . "End")
       ;; ("C-k"   . ("C-S-End" "C-x"))
       )))

(require :slynk)
(slynk:create-server
  :port 43232
  :style slynk:*communication-style*
  :dont-close t)
